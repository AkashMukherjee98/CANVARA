# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Canvara CICD Pipeline Manual Trigger

on:
  workflow_dispatch:

env:
    REGISTRY: ghcr.io
    VERSION: master
    IMAGE_NAME: ${{ github.repository }}
    IMAGE_ID: $REGISTRY/$IMAGE_NAME

jobs:
  deploy:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to the Container registry
        run: |
          sudo docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.CREATE_DOCKER_TOKEN }}
      - name: Kill if there is an existing container
        run: |
          ID=$(sudo docker container ps | awk 'NR > 1 {print $1}')
          if [ $ID ];
          then
          sudo docker stop $ID
          sudo docker rm $ID;
          fi
      - name: Check for existing images & then pull the latest image
        run: |
          #IMAGEID=$(sudo docker images | awk 'NR > 1 {print $3}')
          #if [ $IMAGEID ];
          #then
          #sudo docker rmi $IMAGEID;
          #fi
          sudo docker pull ghcr.io/canvarainc/prototype:main
      - name: Run the image
        run: |
          sudo docker run --detach -v /home/ubuntu/docker_logs:/canvara/logs --env AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} --env AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} --env CANVARA_ENV=prod -p 8000:8000 ghcr.io/canvarainc/prototype:main
          sleep 5
          new_container_id=$(sudo docker container ps | awk 'NR > 1 {print $1}')
          if [ !$new_container_id ]; then
          sleep 5
          fi
  integration_test:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          repository: canvarainc/api_automation
          path: api_automation
          token: ${{ secrets.AUTOMATION_REPO_ACCESS_TOKEN }}
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -r api_automation/requirements.txt
      - name: Setting env variables & running the test
        run: |
          export CANVARA_ENV=prod
          export AWS_CLIENT_ID=${{ secrets.AWS_CLIENT_ID }}
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_COGNITO_ADMIN_USER=${{ secrets.AWS_COGNITO_ADMIN_USER }}
          export AWS_COGNITO_ADMIN_PASSWORD=${{ secrets.AWS_COGNITO_ADMIN_PASSWORD }}
          export AWS_COGNITO_POSTER_USER=${{ secrets.AWS_COGNITO_POSTER_USER }}
          export AWS_COGNITO_POSTER_PASSWORD=${{ secrets.AWS_COGNITO_POSTER_PASSWORD }}
          export AWS_COGNITO_APPLICANT1_USER=${{ secrets.AWS_COGNITO_APPLICANT1_USER }}
          export AWS_COGNITO_APPLICANT1_PASSWORD=${{ secrets.AWS_COGNITO_APPLICANT1_PASSWORD }}
          export AWS_COGNITO_APPLICANT2_USER=${{ secrets.AWS_COGNITO_APPLICANT2_USER }}
          export AWS_COGNITO_APPLICANT2_PASSWORD=${{ secrets.AWS_COGNITO_APPLICANT2_PASSWORD }}
          export AWS_COGNITO_NEW_USER=${{ secrets.AWS_COGNITO_NEW_USER }}
          export AWS_COGNITO_NEW_USER_PASSWORD=${{ secrets.AWS_COGNITO_NEW_USER_PASSWORD }}
          export AWS_COGNITO_NEW_POSTER_USER=${{ secrets.AWS_COGNITO_NEW_POSTER_USER }}
          export AWS_COGNITO_NEW_POSTER_USER_PASSWORD=${{ secrets.AWS_COGNITO_NEW_POSTER_USER_PASSWORD }}
          export BASE_API_URL=${{ secrets.BASE_API_URL }}
          export RDS_HOST=${{ secrets.RDS_PROD_HOST }}
          export RDS_USERNAME=${{ secrets.RDS_USERNAME }}
          export RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
          export RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}
          pytest
